Keep track of game state

Most games track multiple things as a game progresses: points, player positions, and other details are all key.
Each time there's some input, that state changes, and then we want to display new output, in response.

A general pattern for any game does three things:

• Define a game state data structure, to store all of the game state

• Define a reaction that makes a new game state based on previous game state whenver there is new input

• Make a @Stage with @Group and @Phrase to show the game state

For example, let's imagine a simple game that involves typing secret words into a text box, and getting a point each time a secret word is guessed:

\
•Game(secrets•[''] points•#)

state: Game(['cat' 'dog'] 0) … state.secrets.has(Chat()) … state.points: state.points + 1

Stage(
    state.points = state.secrets.length() ? 
        [ Phrase("you win!")]
        [ Group(Stack() [ Phrase("guess my secret words") Phrase(`\state.secrets.length() - state.points\ more secrets`)])]
)
\

Let's break this down.

• The first line, \•Game(secrets•[''] points•#)\ says, /Make a data structure called \Game\ that stores a list of secrets and points/

• The second line says /The game state starts with a list of secrets and zero points. Each time the \Chat\ changes, if the word entered is in the list of secrets, then make a new game state with the points increased by one/.

• Each time the program reevaluates (when the \Chat\ changes), show a stage. If the number of points is equal to the number of secrets, shown a winnning stage. If not, show a prompt and the number of secrets remaining.

This example has some problems:

• If they guess a secret word multiple times, they get more points! Our game state might need to also remember what was guessed, so each word is only counted twice.
• If the player enters multiple words, should it count?

More sophisticated game states and game updates would help us handle these cases.

track-points